const fs = require('fs');
const path = require('path');

// Scans components/** for *.stories.(js|jsx|ts|tsx) and generates storybook/entries.js
const root = path.resolve(__dirname, '..');
const componentsDir = path.join(root, 'components');
const outFile = path.join(root, 'storybook', 'entries.js');

function walk(dir) {
  let results = [];
  const list = fs.readdirSync(dir);
  list.forEach((file) => {
    const filePath = path.join(dir, file);
    const stat = fs.statSync(filePath);
    if (stat && stat.isDirectory()) {
      results = results.concat(walk(filePath));
    } else {
      if (/\.stories\.(js|jsx|ts|tsx)$/.test(file)) results.push(filePath);
    }
  });
  return results;
}

const stories = walk(componentsDir).map((p) => p);

// For each story file, compute path relative to components dir to use as the key
const modules = stories.map((absPath) => {
  const relFromComponents = path.relative(componentsDir, absPath).replace(/\\/g, '/');
  const key = `./${relFromComponents}`; // e.g. ./Choptima/ChoptimaAssembly.stories.tsx
  const requirePath = `../components/${relFromComponents}`; // require path from storybook dir
  return `  '${key}': require('${requirePath}')`;
});

const content = `// Auto-generated by scripts/generate-story-entries.js
module.exports = {
  modules: {
${modules.join(',\n')}
  }
};
`;

fs.mkdirSync(path.dirname(outFile), { recursive: true });
fs.writeFileSync(outFile, content, 'utf8');
console.log(`Wrote ${outFile} with ${stories.length} stories.`);
